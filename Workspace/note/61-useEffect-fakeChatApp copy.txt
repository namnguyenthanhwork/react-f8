import { useEffect, useState } from "react";
/*  
    I. Update DOM (title)
    II. Call API
    III. Listen DOM events
      - Scroll
      - Resize
    IV. Cleanup
      - Remove listener/ Unsubcribe (Observer pattern)
      - Clear timer (setInterval, setTimeout, clearInterval, clearTimeout)
    1. useEffect(callback)
      - gọi callback mỗi khi component re-render
      - gọi callback sau khi component thêm element vào dom
    2. useEffect(callback, [])
      - chỉ gọi callback 1 lần sau khi component mounted
    3. useEffect(callback, [dependences])
      - callback được gọi lại sau khi dependences thay đổi
----------------------------------------------------------------
note bên dưới được áp dụng cho cả mục 1 2 3 ở bên trên
    - 1. callback luôn luôn được gọi sau khi compoment mounted
    - 2. cleanup function luôn được gọi trước khi component unmounted
    - 3. cleanup function luôn được gọi trước khi callback được gọi (trừ lần mounted đầu tiên)
*/
const lessons = [
  {
    id: 1,
    name: "re1",
  },
  {
    id: 2,
    name: "re2",
  },
  {
    id: 3,
    name: "re3",
  },
];

function Content() {
  const [lessonId, setLessonId] = useState(1);

  useEffect(() => {
    const handleComment = ({ detail }) => {
      console.log(detail);
    };
    window.addEventListener(`lesson-${lessonId}`, handleComment);
    return () => {
      window.removeEventListener(`lesson-${lessonId}`, handleComment);
    };
  }, [lessonId]);
  return (
    <div>
      <ul>
        {lessons.map((lesson) => (
          <li
            key={lesson.id}
            style={{ color: lessonId === lesson.id ? "red" : "#111" }}
            onClick={() => setLessonId(lesson.id)}
          >
            {lesson.name}
          </li>
        ))}
      </ul>
    </div>
  );
}

export default Content;
